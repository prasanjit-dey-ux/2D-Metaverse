generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @unique @default(cuid())
  email             String       @unique
  username          String
  tag               String
  displayName       String?
  profileImageUrl   String?
  bannerImageUrl    String?
  avatarId          String?
  bio               String?
  role              Role         @default(User)
  isProfileComplete Boolean      @default(false)
  provider          AuthProvider @default(EMAIL)
  providerId        String?      @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  lastLoginAt       DateTime?
  spaces            Space[]
  avatar            Avatar?      @relation(fields: [avatarId], references: [id])

  @@unique([username, tag])
  @@unique([provider, providerId])
}

model Otp {
  id        String   @id @default(cuid())
  email     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Space {
  id        String          @id @unique @default(cuid())
  name      String
  width     Int
  height    Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  creatorId String
  mapId     String
  creator   User            @relation(fields: [creatorId], references: [id])
  map       Map             @relation(fields: [mapId], references: [id])
  elements  SpaceElements[]
}

model SpaceElements {
  id        String  @id @unique @default(cuid())
  elementId String
  spaceId   String
  x         Int
  y         Int
  element   Element @relation(fields: [elementId], references: [id])
  space     Space   @relation(fields: [spaceId], references: [id])
}

model Element {
  id          String          @id @unique @default(cuid())
  width       Int
  height      Int
  imageUrl    String
  mapElements MapElements[]
  spaces      SpaceElements[]
}

model Map {
  id           String        @id @unique @default(cuid())
  width        Int
  height       Int
  name         String        @unique
  thumbnailUrl String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  mapElements  MapElements[]
  spaces       Space[]
}

model MapElements {
  id        String  @id @unique @default(cuid())
  mapId     String
  elementId String
  x         Int?
  y         Int?
  element   Element @relation(fields: [elementId], references: [id])
  map       Map     @relation(fields: [mapId], references: [id])
}

model Avatar {
  id       String  @id @unique @default(cuid())
  imageUrl String?
  name     String?
  users    User[]
}

enum Role {
  Admin
  User
}

enum AuthProvider {
  EMAIL
  GOOGLE
  GITHUB
}
